"""added tables

Revision ID: 8ccddfc84fc0
Revises: 
Create Date: 2024-04-14 21:32:18.257615

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8ccddfc84fc0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('resource_image')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_name', table_name='users')
    op.drop_index('ix_users_phone', table_name='users')
    op.drop_index('ix_users_role', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.drop_table('consumable_listing')
    op.drop_table('surplus_listing')
    op.drop_table('consumable_macros')
    op.drop_table('prices')
    op.drop_index('ix_provinces_name', table_name='provinces')
    op.drop_table('provinces')
    op.drop_index('ix_macro_types_name', table_name='macro_types')
    op.drop_table('macro_types')
    op.drop_index('ix_consumables_name', table_name='consumables')
    op.drop_index('ix_consumables_type', table_name='consumables')
    op.drop_table('consumables')
    op.drop_index('ix_districts_name', table_name='districts')
    op.drop_table('districts')
    op.drop_index('ix_resources_audience', table_name='resources')
    op.drop_index('ix_resources_title', table_name='resources')
    op.drop_table('resources')
    op.drop_table('farmer_performance')
    op.drop_table('user_surplus_booking')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_surplus_booking',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('consumable_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('poster_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('booker_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booker_id'], ['users.id'], name='user_surplus_booking_booker_id_fkey'),
    sa.ForeignKeyConstraint(['consumable_id'], ['consumables.id'], name='user_surplus_booking_consumable_id_fkey'),
    sa.ForeignKeyConstraint(['poster_id'], ['users.id'], name='user_surplus_booking_poster_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_surplus_booking_pkey')
    )
    op.create_table('farmer_performance',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('performance', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='farmer_performance_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='farmer_performance_pkey')
    )
    op.create_table('resources',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('resources_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('audience', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name='resources_author_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='resources_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_resources_title', 'resources', ['title'], unique=False)
    op.create_index('ix_resources_audience', 'resources', ['audience'], unique=False)
    op.create_table('districts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('districts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('province_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ecological_region', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['province_id'], ['provinces.id'], name='districts_province_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='districts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_districts_name', 'districts', ['name'], unique=False)
    op.create_table('consumables',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('consumables_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('fruit', 'vegetable', 'other', name='consumable_types'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='consumables_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_consumables_type', 'consumables', ['type'], unique=False)
    op.create_index('ix_consumables_name', 'consumables', ['name'], unique=False)
    op.create_table('macro_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('macro_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='macro_types_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_macro_types_name', 'macro_types', ['name'], unique=False)
    op.create_table('provinces',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('provinces_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='provinces_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_provinces_name', 'provinces', ['name'], unique=False)
    op.create_table('prices',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('consumable_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['consumable_id'], ['consumables.id'], name='prices_consumable_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='prices_pkey')
    )
    op.create_table('consumable_macros',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('consumable_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('macro_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['consumable_id'], ['consumables.id'], name='consumable_macros_consumable_id_fkey'),
    sa.ForeignKeyConstraint(['macro_id'], ['macro_types.id'], name='consumable_macros_macro_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='consumable_macros_pkey')
    )
    op.create_table('surplus_listing',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('consumable_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('booked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('posted_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['consumable_id'], ['consumables.id'], name='surplus_listing_consumable_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='surplus_listing_pkey')
    )
    op.create_table('consumable_listing',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('consumable_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('posted_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('district_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['consumable_id'], ['consumables.id'], name='consumable_listing_consumable_id_fkey'),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], name='consumable_listing_district_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='consumable_listing_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='consumable_listing_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('image', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_role', 'users', ['role'], unique=False)
    op.create_index('ix_users_phone', 'users', ['phone'], unique=True)
    op.create_index('ix_users_name', 'users', ['name'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_table('resource_image',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('resource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('image_path_1', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('image_path_2', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], name='resource_image_resource_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='resource_image_pkey')
    )
    # ### end Alembic commands ###
